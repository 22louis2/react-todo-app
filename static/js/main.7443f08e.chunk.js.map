{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","task","handleChange","bind","assertThisInitialized","handleSubmit","evt","preventDefault","createTodo","objectSpread","id","uuid","completed","setState","defineProperty","target","name","value","react_default","a","createElement","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","onClick","class","TodoList","todos","create","remove","update","toggleCompletion","newTodo","concat","toConsumableArray","filter","t","updatedTask","updatedTodos","map","todo","_this2","src_Todo_0","key","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWAuCeA,qBAlCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAM,IACpBR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAJLA,4EAMNa,GACTA,EAAIC,iBACJX,KAAKJ,MAAMgB,WAAXd,OAAAe,EAAA,EAAAf,CAAA,GAA0BE,KAAKI,MAA/B,CAAsCU,GAAIC,MAAQC,WAAW,KAC7DhB,KAAKiB,SAAS,CAACZ,KAAM,0CAEZK,GACTV,KAAKiB,SAALnB,OAAAoB,EAAA,EAAApB,CAAA,GACKY,EAAIS,OAAOC,KAAOV,EAAIS,OAAOE,yCAIlC,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,SAAU1B,KAAKS,cACzCa,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,QAAf,YACAL,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLC,YAAY,WACZf,GAAG,OACHM,KAAK,OACLC,MAAOrB,KAAKI,MAAMC,KAClByB,SAAU9B,KAAKM,eAEnBgB,EAAAC,EAAAC,cAAA,kCA7BUO,cCsEXC,qBAtEX,SAAAA,EAAYpC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACfnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KACDQ,MAAQ,CACT6B,WAAW,EACX5B,KAAMR,EAAKD,MAAMS,MAErBR,EAAKqC,aAAerC,EAAKqC,aAAa3B,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKsC,WAAatC,EAAKsC,WAAW5B,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKuC,aAAevC,EAAKuC,aAAa7B,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKwC,aAAexC,EAAKwC,aAAa9B,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAVLA,8EAafG,KAAKJ,MAAM0C,WAAWtC,KAAKJ,MAAMkB,yCAGjCd,KAAKiB,SAAS,CAACgB,WAAYjC,KAAKI,MAAM6B,iDAE7BvB,GACTA,EAAIC,iBAEJX,KAAKJ,MAAM2C,WAAWvC,KAAKJ,MAAMkB,GAAId,KAAKI,MAAMC,MAChDL,KAAKiB,SAAS,CAACgB,WAAW,yCAEjBvB,GACTV,KAAKiB,SAALnB,OAAAoB,EAAA,EAAApB,CAAA,GACKY,EAAIS,OAAOC,KAAOV,EAAIS,OAAOE,6CAGzBX,GACTV,KAAKJ,MAAM4C,WAAWxC,KAAKJ,MAAMkB,qCAoCjC,OAhCGd,KAAKI,MAAM6B,UAENX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBC,SAAU1B,KAAKoC,cAC5Cd,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLP,MAAOrB,KAAKI,MAAMC,KAClBe,KAAK,OACLU,SAAU9B,KAAKM,eAEnBgB,EAAAC,EAAAC,cAAA,wBAMRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MACIC,UAAWzB,KAAKJ,MAAMoB,UAAY,sBAAwB,YAC1DyB,QAASzC,KAAKqC,cAAerC,KAAKJ,MAAMS,MAE5CiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQiB,QAASzC,KAAKmC,YAClBb,EAAAC,EAAAC,cAAA,KAAGkB,MAAM,gBAEbpB,EAAAC,EAAAC,cAAA,UAAQiB,QAASzC,KAAKkC,cAClBZ,EAAAC,EAAAC,cAAA,KAAGkB,MAAM,2BA7DlBX,cC+DJY,qBA5DX,SAAAA,EAAY/C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,IACf9C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6C,GAAAxC,KAAAH,KAAMJ,KACDQ,MAAQ,CACTwC,MAAO,IAEX/C,EAAKgD,OAAShD,EAAKgD,OAAOtC,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKiD,OAASjD,EAAKiD,OAAOvC,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKkD,OAASlD,EAAKkD,OAAOxC,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKmD,iBAAmBnD,EAAKmD,iBAAiBzC,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IARTA,sEAUZoD,GACHjD,KAAKiB,SAAS,CACV2B,MAAK,GAAAM,OAAApD,OAAAqD,EAAA,EAAArD,CAAME,KAAKI,MAAMwC,OAAjB,CAAwBK,qCAG9BnC,GACHd,KAAKiB,SAAS,CACV2B,MAAO5C,KAAKI,MAAMwC,MAAMQ,OAAO,SAAAC,GAAC,OAAIA,EAAEvC,KAAOA,qCAG9CA,EAAIwC,GACP,IAAMC,EAAevD,KAAKI,MAAMwC,MAAMY,IAAI,SAAAC,GACtC,OAAGA,EAAK3C,KAAOA,EACJhB,OAAAe,EAAA,EAAAf,CAAA,GAAI2D,EAAX,CAAiBpD,KAAMiD,IAEpBG,IAEXzD,KAAKiB,SAAS,CAAC2B,MAAOW,6CAETzC,GACb,IAAMyC,EAAevD,KAAKI,MAAMwC,MAAMY,IAAI,SAAAC,GACtC,OAAGA,EAAK3C,KAAOA,EACJhB,OAAAe,EAAA,EAAAf,CAAA,GAAI2D,EAAX,CAAiBzC,WAAYyC,EAAKzC,YAE/ByC,IAEXzD,KAAKiB,SAAS,CAAC2B,MAAOW,qCAEjB,IAAAG,EAAA1D,KACC4C,EAAQ5C,KAAKI,MAAMwC,MAAMY,IAAI,SAAAC,GAC/B,OAAOnC,EAAAC,EAAAC,cAACmC,EAAD,CACKC,IAAKH,EAAK3C,GACVA,GAAI2C,EAAK3C,GACTT,KAAMoD,EAAKpD,KACXW,UAAWyC,EAAKzC,UAChBsB,WAAYoB,EAAKZ,OACjBP,WAAYmB,EAAKX,OACjBP,WAAYkB,EAAKV,qBAGjC,OACI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,8CACdF,EAAAC,EAAAC,cAAA,UAAKoB,GACLtB,EAAAC,EAAAC,cAACqC,EAAD,CAAajD,WAAYZ,KAAK6C,iBAvDvBd,oBCOR+B,MARf,WACE,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7443f08e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {task: ''};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state, id: uuid(), completed: false});\r\n        this.setState({task: ''});\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n    render () {\r\n        return (\r\n            <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>New Todo</label>\r\n                <input \r\n                    type='text' \r\n                    placeholder='New Todo' \r\n                    id='task' \r\n                    name='task'\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    handleRemove() {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n    toggleForm() {\r\n        this.setState({isEditing: !this.state.isEditing});\r\n    }\r\n    handleUpdate(evt) {\r\n        evt.preventDefault();\r\n        // take new task data and pass up to parent\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({isEditing: false});\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n    handleToggle(evt) {\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n    render() {\r\n        let result;\r\n        if(this.state.isEditing) {\r\n            result = (\r\n                <div className='Todo'>\r\n                    <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n                        <input \r\n                            type='text' \r\n                            value={this.state.task} \r\n                            name='task' \r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        } else {\r\n            result = (\r\n                <div className='Todo'>\r\n                    <li \r\n                        className={this.props.completed ? 'Todo-task completed' : 'Todo-task'} \r\n                        onClick={this.handleToggle}>{this.props.task}\r\n                    </li>\r\n                    <div className='Todo-buttons'>\r\n                        <button onClick={this.toggleForm}>\r\n                            <i class='fas fa-pen'></i>\r\n                        </button>\r\n                        <button onClick={this.handleRemove}>\r\n                            <i class='fas fa-trash'></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from 'react';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport Todo from './Todo';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n    create(newTodo) {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        });\r\n    }\r\n    update(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return {...todo, task: updatedTask};   \r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return {...todo, completed: !todo.completed};   \r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map(todo => {\r\n            return <Todo \r\n                        key={todo.id} \r\n                        id={todo.id} \r\n                        task={todo.task} \r\n                        completed={todo.completed}\r\n                        removeTodo={this.remove}\r\n                        updateTodo={this.update}\r\n                        toggleTodo={this.toggleCompletion}\r\n                    />;\r\n        });\r\n        return (\r\n            <div className='TodoList'>\r\n                <h1>Todo List!<span>A Simple React Todo List App.</span></h1>\r\n                <ul>{todos}</ul>\r\n                <NewTodoForm createTodo={this.create} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}